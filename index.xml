<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>首页 on C&#43;&#43; 学习笔记</title>
    <link>https://kingye.me/study-cpp/</link>
    <description>Recent content in 首页 on C&#43;&#43; 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://kingye.me/study-cpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>4.1 教程</title>
      <link>https://kingye.me/study-cpp/docs/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-cpp/docs/appendix/tutorial/</guid>
      <description>教程 #  基础 #    learn c++ in y minutes
  C++ 后台开发有哪些练基础的开源项目？
 yedf/handy     进阶 #   林锐 博士 - 高质量 C++/C 编程指南  </description>
    </item>
    
    <item>
      <title>class</title>
      <link>https://kingye.me/study-cpp/docs/basic/grammar/keyword/class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-cpp/docs/basic/grammar/keyword/class/</guid>
      <description>class #  建议：
 class 表示被封装的用户自定义类型，不公开定义非静态数据成员，一般通过成员方法进行交互。 struct 表示数据的简单集合，公开定义数据成员，只定义用于初始化数据成员的方法 (比如：构造 / 析构函数，initialize(), reset(), validate())。  // 简单的数据聚合，没有动作 struct Coordinate {  int x;  int y;  int z; };  // 有动作的对象 class Cat { public:  void meow(); private:  ... }; class vs struct #   默认继承权限  class: private struct: public   成员的默认访问权限  class: private struct: public    除了这两点，class 和 struct 基本就是一个东西。</description>
    </item>
    
    <item>
      <title>与 C 的差异</title>
      <link>https://kingye.me/study-cpp/docs/basic/grammar/keyword/vs-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-cpp/docs/basic/grammar/keyword/vs-c/</guid>
      <description>C++ 与 C 语言的差异 #    字符字面量的大小
// 在C++中，字符字面量的大小是一个字节。 sizeof(&amp;#39;c&amp;#39;) == 1  // 在C语言中，字符字面量的大小与int相同。 sizeof(&amp;#39;c&amp;#39;) == sizeof(10)   函数原型与函数定义匹配
// C++ 的函数原型与函数定义是严格匹配的 void func(); // 这个函数不能接受任何参数  // 而在C语言中 void func(); // 这个函数能接受任意数量的参数   NULL vs nullptr
// 在 C++ 中，用 nullptr 代替 C 语言中的 NULL int* ip = nullptr;   同文件
// C++ 也可以使用 C 语言的标准头文件， // 但是需要加上前缀 “c” 并去掉末尾的 “.h”。 #include &amp;lt;cstdio&amp;gt;  </description>
    </item>
    
    <item>
      <title>函数</title>
      <link>https://kingye.me/study-cpp/docs/basic/grammar/keyword/function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-cpp/docs/basic/grammar/keyword/function/</guid>
      <description>函数 #  函数参数 #  参数默认值
// 你可以为函数的参数指定默认值， // 默认参数必须放在所有的常规参数之后。 void doSomethingWithInts(int a, int b = 1, int c = 4) { } 函数重载 #  // C++支持函数重载，你可以定义一组名称相同而参数不同的函数 void print(char const* myString) {  printf(&amp;#34;String %s\n&amp;#34;, myString); }  void print(int myInt) {  printf(&amp;#34;My int is %d&amp;#34;, myInt); }  int main() {  print(&amp;#34;Hello&amp;#34;); // 解析为 void print(const char*)  print(15); // 解析为 void print(int) } </description>
    </item>
    
    <item>
      <title>指针</title>
      <link>https://kingye.me/study-cpp/docs/basic/grammar/keyword/pointer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-cpp/docs/basic/grammar/keyword/pointer/</guid>
      <description>C++ 指针 #  智能指针 #     指针类别 支持 备注     unique_ptr C++ 11 拥有独有对象所有权语义的智能指针   shared_ptr C++ 11 拥有共享对象所有权语义的智能指针   weak_ptr C++ 11 到 std::shared_ptr 所管理对象的弱引用   auto_ptr C++ 17 中移除 拥有严格对象所有权语义的智能指针    unique_ptr #  std::unique_ptr 是通过指针占有并管理另一对象，并在 unique_ptr 离开作用域时释放该对象的智能指针。在下列两者之一发生时用关联的删除器释放对象：
 销毁了管理的 unique_ptr 对象 通过 operator= 或 reset () 赋值另一指针给管理的 unique_ptr 对象。  shared_ptr #  std::shared_ptr 是通过指针保持对象共享所有权的智能指针。多个 shared_ptr 对象可占有同一对象。下列情况之一出现时销毁对象并解分配其内存：</description>
    </item>
    
    <item>
      <title>4.2 面试题</title>
      <link>https://kingye.me/study-cpp/docs/appendix/interview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-cpp/docs/appendix/interview/</guid>
      <description>面试题 #  基础题 #  huihut/interview #  你遇到过哪些高质量的 C++ 面试？ #  What is the best C++ interview question? [closed] #  C++ FAQ #   volatile 有什么用？ #   告诉编译器不应对这样的对象进行优化 每次访问时都必须从内存中取出值  没有被 volatile 修饰的变量，可能由于编译器的优化，从 CPU 寄存器中取值     const 可以是 volatile （如只读的状态寄存器） 指针可以是 volatile    进阶题 #  为什么 C++ 的 member function template 不能是 virtual 的 #  比如，下面的代码是不合法的：</description>
    </item>
    
    <item>
      <title>命名空间</title>
      <link>https://kingye.me/study-cpp/docs/basic/grammar/keyword/namespace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-cpp/docs/basic/grammar/keyword/namespace/</guid>
      <description>C++ 命名空间 #  // 命名空间为变量、函数和其他声明提供了分离的的作用域。 // 命名空间可以嵌套使用。  namespace First {  namespace Nested {  void foo()  {  printf(&amp;#34;This is First::Nested::foo\n&amp;#34;);  }  } // 结束嵌套的命名空间Nested } // 结束命名空间First  namespace Second {  void foo()  {  printf(&amp;#34;This is Second::foo\n&amp;#34;)  } }  void foo() {  printf(&amp;#34;This is global foo\n&amp;#34;); }  int main() {  // 如果没有特别指定，就从“Second”中取得所需的内容。  using namespace Second;   foo(); // 显示“This is Second::foo”  First::Nested::foo(); // 显示“This is First::Nested::foo”  ::foo(); // 显示“This is global foo” } </description>
    </item>
    
    <item>
      <title>引用</title>
      <link>https://kingye.me/study-cpp/docs/basic/grammar/keyword/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-cpp/docs/basic/grammar/keyword/reference/</guid>
      <description>C++ 引用 #    引用是一种特殊的指针类型，一旦被定义就不能重新赋值，并且不能被设置为空值。
  使用引用时的语法与原变量相同
 对引用类型进行解引用时，不需要使用 * 赋值时也不需要用 &amp;amp; 来取地址  using namespace std;  string foo = &amp;#34;I am foo&amp;#34;; string bar = &amp;#34;I am bar&amp;#34;;  string&amp;amp; fooRef = foo; // 建立了一个对foo的引用。 fooRef += &amp;#34;. Hi!&amp;#34;; // 通过引用来修改foo的值 cout &amp;lt;&amp;lt; fooRef; // &amp;#34;I am foo. Hi!&amp;#34; // 这句话的并不会改变fooRef的指向，其效果与“foo = bar”相同。 // 也就是说，在执行这条语句之后，foo == &amp;#34;I am bar&amp;#34;。 fooRef = bar;   不能修改一个常量引用的值</description>
    </item>
    
    <item>
      <title>4.3 关注项目</title>
      <link>https://kingye.me/study-cpp/docs/appendix/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-cpp/docs/appendix/attention/</guid>
      <description>关注项目 #  google/glog #  C++ implementation of the Google logging module
gRPC #  gRPC is a modern, open source, high-performance remote procedure call (RPC) framework that can run anywhere. gRPC enables client and server applications to communicate transparently, and simplifies the building of connected systems.
grpc.io
 web #  ipkn/crow #  Crow is very fast and easy to use C++ micro web framework (inspired by Python Flask)</description>
    </item>
    
  </channel>
</rss>
