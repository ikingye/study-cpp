<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第四部分 附录 on C&#43;&#43; 学习笔记</title>
    <link>https://ikingye.github.io/study-cpp/docs/appendix/</link>
    <description>Recent content in 第四部分 附录 on C&#43;&#43; 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ikingye.github.io/study-cpp/docs/appendix/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>4.1 教程</title>
      <link>https://ikingye.github.io/study-cpp/docs/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-cpp/docs/appendix/tutorial/</guid>
      <description>教程 #  基础 #   learn c++ in y minutes   C++ 后台开发有哪些练基础的开源项目？  yedf/handy     进阶 #  </description>
    </item>
    
    <item>
      <title>4.2 面试题</title>
      <link>https://ikingye.github.io/study-cpp/docs/appendix/interview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-cpp/docs/appendix/interview/</guid>
      <description>面试题 #  基础题 #  huihut/interview #  你遇到过哪些高质量的 C++ 面试？ #  What is the best C++ interview question? [closed] #  C++ FAQ #   volatile 有什么用？ #   告诉编译器不应对这样的对象进行优化 每次访问时都必须从内存中取出值  没有被 volatile 修饰的变量，可能由于编译器的优化，从 CPU 寄存器中取值     const 可以是 volatile （如只读的状态寄存器） 指针可以是 volatile    进阶题 #  为什么 C++ 的 member function template 不能是 virtual 的 #  比如，下面的代码是不合法的：</description>
    </item>
    
    <item>
      <title>4.3 关注项目</title>
      <link>https://ikingye.github.io/study-cpp/docs/appendix/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-cpp/docs/appendix/attention/</guid>
      <description>关注项目 #  google/glog #  C++ implementation of the Google logging module
gRPC #  gRPC is a modern, open source, high-performance remote procedure call (RPC) framework that can run anywhere. gRPC enables client and server applications to communicate transparently, and simplifies the building of connected systems.
grpc.io
 web #  ipkn/crow #  Crow is very fast and easy to use C++ micro web framework (inspired by Python Flask)</description>
    </item>
    
  </channel>
</rss>