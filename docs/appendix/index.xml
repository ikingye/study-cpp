<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第四部分 附录 on C&#43;&#43; 学习笔记</title>
    <link>https://ikingye.github.io/study-cpp/docs/appendix/</link>
    <description>Recent content in 第四部分 附录 on C&#43;&#43; 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ikingye.github.io/study-cpp/docs/appendix/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>4.1 教程</title>
      <link>https://ikingye.github.io/study-cpp/docs/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-cpp/docs/appendix/tutorial/</guid>
      <description>教程 #  基础 #   learn c++ in y minutes   C++ 后台开发有哪些练基础的开源项目？  yedf/handy     进阶 #  </description>
    </item>
    
    <item>
      <title>4.2 面试题</title>
      <link>https://ikingye.github.io/study-cpp/docs/appendix/interview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-cpp/docs/appendix/interview/</guid>
      <description>面试题 #   你遇到过哪些高质量的 C++ 面试？ What is the best C++ interview question? [closed]  基础题 #  进阶题 #  为什么 C++ 的 member function template 不能是 virtual 的 #  比如，下面的代码是不合法的：
class Animal{ public: template&amp;lt;typename T&amp;gt; virtual void make_sound(){ //...  } }; 因为 C++ 的编译与链接模型是 &amp;ldquo;分离&amp;rdquo; 的 (至少是部分原因吧)。
从 Unix/C 开始，一个 C/C++ 程序就可以被分开编译，然后用一个 linker 链接起来。这种模型有一个问题，就是各个编译单元可能对另一个编译单元一无所知。 一个 function template 最后到底会被 instantiate 为多少个函数，要等整个程序 (所有的编译单元) 全部被编译完成才知道。 同时，virtual function 的实现大多利用了一个 &amp;ldquo;虚函数表&amp;rdquo; 的东西，这种实现中，一个类的内存布局 (或者说虚函数表的内存布局) 需要在这个类编译完成的时候就被完全确定。 所以，由上面的矛盾可知，C++ 的 member function 不能既是 template 又是 virtual 的。</description>
    </item>
    
    <item>
      <title>4.3 关注项目</title>
      <link>https://ikingye.github.io/study-cpp/docs/appendix/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-cpp/docs/appendix/attention/</guid>
      <description>关注项目 #  google/glog #  C++ implementation of the Google logging module
gRPC #  gRPC is a modern, open source, high-performance remote procedure call (RPC) framework that can run anywhere. gRPC enables client and server applications to communicate transparently, and simplifies the building of connected systems.
grpc.io
 web #  ipkn/crow #  Crow is very fast and easy to use C++ micro web framework (inspired by Python Flask)</description>
    </item>
    
  </channel>
</rss>